'use client';

import { useState, useEffect, type FC } from 'react';
import { Button, type ButtonProps } from '@/components/ui/button';
import { cn } from '@/common/utils';
import { Moon, Sun } from 'lucide-react';
import { motion } from 'framer-motion';
import { useTheme } from 'next-themes';

type ThemeToggleButtonProps = Pick<ButtonProps, 'className'>;

/** generated by v0.dev */
const moonVariants = {
  initial: { scale: 0.6, rotate: 90 },
  animate: { scale: 1, rotate: 0, transition: { duration: 0.5 } },
  exit: { scale: 0.6, rotate: 90, transition: { duration: 0.5 } },
};

const sunVariants = {
  initial: { scale: 0.6, rotate: -90 },
  animate: { scale: 1, rotate: 0, transition: { duration: 0.5 } },
  exit: { scale: 0.6, rotate: -90, transition: { duration: 0.5 } },
};

const ThemeToggleButton: FC<ThemeToggleButtonProps> = ({ className }) => {
  const [mounted, setMounted] = useState<boolean>(false);

  useEffect(() => {
    setMounted(true);
  }, []);

  const { resolvedTheme, setTheme } = useTheme();
  const isDark = resolvedTheme === 'dark';
  const toggleTheme = () => setTheme(isDark ? 'light' : 'dark');

  if (!mounted) return null;

  return (
    <Button
      variant="ghost"
      size="icon"
      onClick={toggleTheme}
      className={cn('relative rounded-full', className)}
      aria-label={isDark ? 'Switch to light theme' : 'Switch to dark theme'}
    >
      <motion.div
        key={isDark ? 'moon' : 'sun'}
        className="[&_svg]:!w-6 [&_svg]:!h-6 color-primary"
        variants={isDark ? moonVariants : sunVariants}
        initial="initial"
        animate="animate"
        exit="exit"
      >
        {isDark ? <Moon /> : <Sun />}
      </motion.div>
    </Button>
  );
};

export default ThemeToggleButton;
